/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdlib.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>

#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <cutils/log.h>
#include <cutils/properties.h>
#include <logwrap/logwrap.h>

#include "MobileLogController.h"

#define LOG_FILE_DIR    "/dev/log/"
#define DEFAULT_LOG_ROTATE_SIZE_KBYTES 10240
#define DEFAULT_MAX_ROTATED_LOGS 4

MobileLogController::MobileLogController() {
	sJrdLogcatCtrl = new JrdLogcat();
}

MobileLogController::~MobileLogController() {

}

bool MobileLogController::startMobileLogging() {
	
}

bool MobileLogController::stopMobileLogging() {

}

bool MobileLogController::isLoggingStarted() {

}

MobileLogController::JrdLogcat::JrdLogcat(){
 	logRotateSizeKBytes = DEFAULT_LOG_ROTATE_SIZE_KBYTES;
	maxRotatedLogs = DEFAULT_MAX_ROTATED_LOGS;
	outputFileName = NULL;
	g_devCount = 0;
	g_logformat = android_log_format_new();
}

bool MobileLogController::JrdLogcat::start() {

}

bool MobileLogController::JrdLogcat::stop() {

}

void MobileLogController::JrdLogcat::setDevices() {
	char* str_arry[] = {"main", "system", "radio", "events"} ;
	int i = 0;
	int arry_size = sizeof(str_arry) / sizeof(str_arry[0]);

	for (i=0; i<arry_size; i++) {
		char* buf = (char*) malloc(strlen(LOG_FILE_DIR) + strlen(str_arry[i]) + 1);
		strcpy(buf, LOG_FILE_DIR);
		strcat(buf, str_arry[i]);

		bool binary = strcmp(str_arry[i], "events") == 0;
		if (binary) {
			needBinary = true;
		}

		if (devices) {
		    dev = devices;
		    while (dev->next) {
		        dev = dev->next;
		    }
		    dev->next = new log_device_t(buf, binary, str_arry[i][0]);
		} else {
		    devices = new log_device_t(buf, binary, str_arry[i][0]);
		}
		g_devCount++;
	}

}

